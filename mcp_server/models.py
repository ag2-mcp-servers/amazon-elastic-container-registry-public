# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:07:51+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AboutText(RootModel[constr(max_length=25600)]):
    root: constr(max_length=25600)


class Architecture(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ArchitectureList(RootModel[List[Architecture]]):
    root: List[Architecture] = Field(..., max_length=50)


class Arn(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Base64(RootModel[constr(pattern=r'^\S+$')]):
    root: constr(pattern=r'^\S+$')


class BatchedOperationLayerDigest(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class BatchedOperationLayerDigestList(RootModel[List[BatchedOperationLayerDigest]]):
    root: List[BatchedOperationLayerDigest] = Field(..., max_length=100, min_length=1)


class CreationTimestamp(RootModel[datetime]):
    root: datetime


class DefaultRegistryAliasFlag(RootModel[bool]):
    root: bool


class EmptyUploadException(RootModel[Any]):
    root: Any


class ExpirationTimestamp(RootModel[datetime]):
    root: datetime


class ForceFlag(RootModel[bool]):
    root: bool


class GetAuthorizationTokenRequest(BaseModel):
    pass


class GetRegistryCatalogDataRequest(BaseModel):
    pass


class ImageAlreadyExistsException(RootModel[Any]):
    root: Any


class ImageDigest(RootModel[str]):
    root: str


class ImageDigestDoesNotMatchException(RootModel[Any]):
    root: Any


class ImageFailureCode(Enum):
    InvalidImageDigest = 'InvalidImageDigest'
    InvalidImageTag = 'InvalidImageTag'
    ImageTagDoesNotMatchDigest = 'ImageTagDoesNotMatchDigest'
    ImageNotFound = 'ImageNotFound'
    MissingDigestAndTag = 'MissingDigestAndTag'
    ImageReferencedByManifestList = 'ImageReferencedByManifestList'
    KmsError = 'KmsError'


class ImageFailureReason(RootModel[str]):
    root: str


class ImageManifest(RootModel[constr(min_length=1, max_length=4194304)]):
    root: constr(min_length=1, max_length=4194304)


class ImageNotFoundException(RootModel[Any]):
    root: Any


class ImageSizeInBytes(RootModel[int]):
    root: int


class ImageTag(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class ImageTagAlreadyExistsException(RootModel[Any]):
    root: Any


class ImageTagList(RootModel[List[ImageTag]]):
    root: List[ImageTag]


class InvalidLayerException(RootModel[Any]):
    root: Any


class InvalidLayerPartException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidTagParameterException(RootModel[Any]):
    root: Any


class LayerAlreadyExistsException(RootModel[Any]):
    root: Any


class LayerAvailability(Enum):
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'


class LayerDigest(RootModel[constr(pattern=r'[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+')]):
    root: constr(pattern=r'[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+')


class LayerDigestList(RootModel[List[LayerDigest]]):
    root: List[LayerDigest] = Field(..., max_length=100, min_length=1)


class LayerFailureCode(Enum):
    InvalidLayerDigest = 'InvalidLayerDigest'
    MissingLayerDigest = 'MissingLayerDigest'


class LayerFailureReason(RootModel[str]):
    root: str


class LayerPartBlob(RootModel[constr(min_length=0, max_length=20971520)]):
    root: constr(min_length=0, max_length=20971520)


class LayerPartTooSmallException(RootModel[Any]):
    root: Any


class LayerSizeInBytes(RootModel[int]):
    root: int


class LayersNotFoundException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    resourceArn: Arn


class LogoImageBlob(RootModel[constr(min_length=0, max_length=512000)]):
    root: constr(min_length=0, max_length=512000)


class MarketplaceCertified(RootModel[bool]):
    root: bool


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MediaType(RootModel[str]):
    root: str


class NextToken(RootModel[str]):
    root: str


class OperatingSystem(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class OperatingSystemList(RootModel[List[OperatingSystem]]):
    root: List[OperatingSystem] = Field(..., max_length=50)


class PartSize(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class PrimaryRegistryAliasFlag(RootModel[bool]):
    root: bool


class PushTimestamp(RootModel[datetime]):
    root: datetime


class ReferencedImageDetail(BaseModel):
    artifactMediaType: Optional[MediaType] = None
    imageDigest: Optional[ImageDigest] = None
    imageManifestMediaType: Optional[MediaType] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageSizeInBytes: Optional[ImageSizeInBytes] = None


class ReferencedImagesNotFoundException(RootModel[Any]):
    root: Any


class RegistryAliasName(
    RootModel[
        constr(
            pattern=r'[a-z][a-z0-9]+(?:[._-][a-z0-9]+)*', min_length=2, max_length=50
        )
    ]
):
    root: constr(
        pattern=r'[a-z][a-z0-9]+(?:[._-][a-z0-9]+)*', min_length=2, max_length=50
    )


class RegistryAliasStatus(Enum):
    ACTIVE = 'ACTIVE'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'


class RegistryDisplayName(RootModel[constr(min_length=0, max_length=100)]):
    root: constr(min_length=0, max_length=100)


class RegistryId(RootModel[constr(pattern=r'[0-9]{12}')]):
    root: constr(pattern=r'[0-9]{12}')


class RegistryIdOrAlias(RootModel[constr(min_length=2, max_length=50)]):
    root: constr(min_length=2, max_length=50)


class RegistryNotFoundException(RootModel[Any]):
    root: Any


class RegistryVerified(RootModel[bool]):
    root: bool


class RepositoryAlreadyExistsException(RootModel[Any]):
    root: Any


class RepositoryCatalogDataNotFoundException(RootModel[Any]):
    root: Any


class RepositoryDescription(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class RepositoryName(
    RootModel[
        constr(
            pattern=r'(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*',
            min_length=2,
            max_length=205,
        )
    ]
):
    root: constr(
        pattern=r'(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*',
        min_length=2,
        max_length=205,
    )


class RepositoryNameList(RootModel[List[RepositoryName]]):
    root: List[RepositoryName] = Field(..., max_length=100, min_length=1)


class RepositoryNotEmptyException(RootModel[Any]):
    root: Any


class RepositoryNotFoundException(RootModel[Any]):
    root: Any


class RepositoryPolicyNotFoundException(RootModel[Any]):
    root: Any


class RepositoryPolicyText(RootModel[constr(min_length=0, max_length=10240)]):
    root: constr(min_length=0, max_length=10240)


class ResourceUrl(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class ServerException(RootModel[Any]):
    root: Any


class SetRepositoryPolicyRequest(BaseModel):
    force: Optional[ForceFlag] = None
    policyText: RepositoryPolicyText
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class SetRepositoryPolicyResponse(BaseModel):
    policyText: Optional[RepositoryPolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TooManyTagsException(RootModel[Any]):
    root: Any


class UnsupportedCommandException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    resourceArn: Arn
    tagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UploadId(
    RootModel[
        constr(
            pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
        )
    ]
):
    root: constr(
        pattern=r'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
    )


class UploadLayerPartRequest(BaseModel):
    layerPartBlob: LayerPartBlob
    partFirstByte: PartSize
    partLastByte: PartSize
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName
    uploadId: UploadId


class UploadLayerPartResponse(BaseModel):
    lastByteReceived: Optional[PartSize] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None


class UploadNotFoundException(RootModel[Any]):
    root: Any


class Url(RootModel[str]):
    root: str


class UsageText(RootModel[constr(max_length=25600)]):
    root: constr(max_length=25600)


class XAmzTarget(Enum):
    SpencerFrontendService_BatchCheckLayerAvailability = (
        'SpencerFrontendService.BatchCheckLayerAvailability'
    )


class XAmzTarget1(Enum):
    SpencerFrontendService_BatchDeleteImage = 'SpencerFrontendService.BatchDeleteImage'


class XAmzTarget2(Enum):
    SpencerFrontendService_CompleteLayerUpload = (
        'SpencerFrontendService.CompleteLayerUpload'
    )


class XAmzTarget3(Enum):
    SpencerFrontendService_CreateRepository = 'SpencerFrontendService.CreateRepository'


class XAmzTarget4(Enum):
    SpencerFrontendService_DeleteRepository = 'SpencerFrontendService.DeleteRepository'


class XAmzTarget5(Enum):
    SpencerFrontendService_DeleteRepositoryPolicy = (
        'SpencerFrontendService.DeleteRepositoryPolicy'
    )


class XAmzTarget6(Enum):
    SpencerFrontendService_DescribeImageTags = (
        'SpencerFrontendService.DescribeImageTags'
    )


class XAmzTarget7(Enum):
    SpencerFrontendService_DescribeImages = 'SpencerFrontendService.DescribeImages'


class XAmzTarget8(Enum):
    SpencerFrontendService_DescribeRegistries = (
        'SpencerFrontendService.DescribeRegistries'
    )


class XAmzTarget9(Enum):
    SpencerFrontendService_DescribeRepositories = (
        'SpencerFrontendService.DescribeRepositories'
    )


class XAmzTarget10(Enum):
    SpencerFrontendService_GetAuthorizationToken = (
        'SpencerFrontendService.GetAuthorizationToken'
    )


class XAmzTarget11(Enum):
    SpencerFrontendService_GetRegistryCatalogData = (
        'SpencerFrontendService.GetRegistryCatalogData'
    )


class XAmzTarget12(Enum):
    SpencerFrontendService_GetRepositoryCatalogData = (
        'SpencerFrontendService.GetRepositoryCatalogData'
    )


class XAmzTarget13(Enum):
    SpencerFrontendService_GetRepositoryPolicy = (
        'SpencerFrontendService.GetRepositoryPolicy'
    )


class XAmzTarget14(Enum):
    SpencerFrontendService_InitiateLayerUpload = (
        'SpencerFrontendService.InitiateLayerUpload'
    )


class XAmzTarget15(Enum):
    SpencerFrontendService_ListTagsForResource = (
        'SpencerFrontendService.ListTagsForResource'
    )


class XAmzTarget16(Enum):
    SpencerFrontendService_PutImage = 'SpencerFrontendService.PutImage'


class XAmzTarget17(Enum):
    SpencerFrontendService_PutRegistryCatalogData = (
        'SpencerFrontendService.PutRegistryCatalogData'
    )


class XAmzTarget18(Enum):
    SpencerFrontendService_PutRepositoryCatalogData = (
        'SpencerFrontendService.PutRepositoryCatalogData'
    )


class XAmzTarget19(Enum):
    SpencerFrontendService_SetRepositoryPolicy = (
        'SpencerFrontendService.SetRepositoryPolicy'
    )


class XAmzTarget20(Enum):
    SpencerFrontendService_TagResource = 'SpencerFrontendService.TagResource'


class XAmzTarget21(Enum):
    SpencerFrontendService_UntagResource = 'SpencerFrontendService.UntagResource'


class XAmzTarget22(Enum):
    SpencerFrontendService_UploadLayerPart = 'SpencerFrontendService.UploadLayerPart'


class AuthorizationData(BaseModel):
    authorizationToken: Optional[Base64] = None
    expiresAt: Optional[ExpirationTimestamp] = None


class BatchCheckLayerAvailabilityRequest(BaseModel):
    layerDigests: BatchedOperationLayerDigestList
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName


class CompleteLayerUploadRequest(BaseModel):
    layerDigests: LayerDigestList
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName
    uploadId: UploadId


class CompleteLayerUploadResponse(BaseModel):
    layerDigest: Optional[LayerDigest] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None


class DeleteRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DeleteRepositoryPolicyResponse(BaseModel):
    policyText: Optional[RepositoryPolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class DeleteRepositoryRequest(BaseModel):
    force: Optional[ForceFlag] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeImageTagsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeRegistriesRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeRepositoriesRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryNames: Optional[RepositoryNameList] = None


class GetAuthorizationTokenResponse(BaseModel):
    authorizationData: Optional[AuthorizationData] = None


class GetRepositoryCatalogDataRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetRepositoryPolicyResponse(BaseModel):
    policyText: Optional[RepositoryPolicyText] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class ImageDetail(BaseModel):
    artifactMediaType: Optional[MediaType] = None
    imageDigest: Optional[ImageDigest] = None
    imageManifestMediaType: Optional[MediaType] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageSizeInBytes: Optional[ImageSizeInBytes] = None
    imageTags: Optional[ImageTagList] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None


class ImageDetailList(RootModel[List[ImageDetail]]):
    root: List[ImageDetail]


class ImageIdentifier(BaseModel):
    imageDigest: Optional[ImageDigest] = None
    imageTag: Optional[ImageTag] = None


class ImageIdentifierList(RootModel[List[ImageIdentifier]]):
    root: List[ImageIdentifier] = Field(..., max_length=100, min_length=1)


class ImageTagDetail(BaseModel):
    createdAt: Optional[CreationTimestamp] = None
    imageDetail: Optional[ReferencedImageDetail] = None
    imageTag: Optional[ImageTag] = None


class ImageTagDetailList(RootModel[List[ImageTagDetail]]):
    root: List[ImageTagDetail]


class InitiateLayerUploadRequest(BaseModel):
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName


class InitiateLayerUploadResponse(BaseModel):
    partSize: Optional[PartSize] = None
    uploadId: Optional[UploadId] = None


class Layer(BaseModel):
    layerAvailability: Optional[LayerAvailability] = None
    layerDigest: Optional[LayerDigest] = None
    layerSize: Optional[LayerSizeInBytes] = None
    mediaType: Optional[MediaType] = None


class LayerFailure(BaseModel):
    failureCode: Optional[LayerFailureCode] = None
    failureReason: Optional[LayerFailureReason] = None
    layerDigest: Optional[BatchedOperationLayerDigest] = None


class LayerFailureList(RootModel[List[LayerFailure]]):
    root: List[LayerFailure]


class LayerList(RootModel[List[Layer]]):
    root: List[Layer]


class PutImageRequest(BaseModel):
    imageDigest: Optional[ImageDigest] = None
    imageManifest: ImageManifest
    imageManifestMediaType: Optional[MediaType] = None
    imageTag: Optional[ImageTag] = None
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName


class PutRegistryCatalogDataRequest(BaseModel):
    displayName: Optional[RegistryDisplayName] = None


class RegistryAlias(BaseModel):
    defaultRegistryAlias: DefaultRegistryAliasFlag
    name: RegistryAliasName
    primaryRegistryAlias: PrimaryRegistryAliasFlag
    status: RegistryAliasStatus


class RegistryAliasList(RootModel[List[RegistryAlias]]):
    root: List[RegistryAlias]


class RegistryCatalogData(BaseModel):
    displayName: Optional[RegistryDisplayName] = None


class Repository(BaseModel):
    createdAt: Optional[CreationTimestamp] = None
    registryId: Optional[RegistryId] = None
    repositoryArn: Optional[Arn] = None
    repositoryName: Optional[RepositoryName] = None
    repositoryUri: Optional[Url] = None


class RepositoryCatalogData(BaseModel):
    aboutText: Optional[AboutText] = None
    architectures: Optional[ArchitectureList] = None
    description: Optional[RepositoryDescription] = None
    logoUrl: Optional[ResourceUrl] = None
    marketplaceCertified: Optional[MarketplaceCertified] = None
    operatingSystems: Optional[OperatingSystemList] = None
    usageText: Optional[UsageText] = None


class RepositoryCatalogDataInput(BaseModel):
    aboutText: Optional[AboutText] = None
    architectures: Optional[ArchitectureList] = None
    description: Optional[RepositoryDescription] = None
    logoImageBlob: Optional[LogoImageBlob] = None
    operatingSystems: Optional[OperatingSystemList] = None
    usageText: Optional[UsageText] = None


class RepositoryList(RootModel[List[Repository]]):
    root: List[Repository]


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    resourceArn: Arn
    tags: TagList


class BatchCheckLayerAvailabilityResponse(BaseModel):
    failures: Optional[LayerFailureList] = None
    layers: Optional[LayerList] = None


class BatchDeleteImageRequest(BaseModel):
    imageIds: ImageIdentifierList
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName


class CreateRepositoryRequest(BaseModel):
    catalogData: Optional[RepositoryCatalogDataInput] = None
    repositoryName: RepositoryName
    tags: Optional[TagList] = None


class CreateRepositoryResponse(BaseModel):
    catalogData: Optional[RepositoryCatalogData] = None
    repository: Optional[Repository] = None


class DeleteRepositoryResponse(BaseModel):
    repository: Optional[Repository] = None


class DescribeImageTagsResponse(BaseModel):
    imageTagDetails: Optional[ImageTagDetailList] = None
    nextToken: Optional[NextToken] = None


class DescribeImagesRequest(BaseModel):
    imageIds: Optional[ImageIdentifierList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeImagesResponse(BaseModel):
    imageDetails: Optional[ImageDetailList] = None
    nextToken: Optional[NextToken] = None


class DescribeRepositoriesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    repositories: Optional[RepositoryList] = None


class GetRegistryCatalogDataResponse(BaseModel):
    registryCatalogData: RegistryCatalogData


class GetRepositoryCatalogDataResponse(BaseModel):
    catalogData: Optional[RepositoryCatalogData] = None


class Image(BaseModel):
    imageId: Optional[ImageIdentifier] = None
    imageManifest: Optional[ImageManifest] = None
    imageManifestMediaType: Optional[MediaType] = None
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: Optional[RepositoryName] = None


class ImageFailure(BaseModel):
    failureCode: Optional[ImageFailureCode] = None
    failureReason: Optional[ImageFailureReason] = None
    imageId: Optional[ImageIdentifier] = None


class ImageFailureList(RootModel[List[ImageFailure]]):
    root: List[ImageFailure]


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class PutImageResponse(BaseModel):
    image: Optional[Image] = None


class PutRegistryCatalogDataResponse(BaseModel):
    registryCatalogData: RegistryCatalogData


class PutRepositoryCatalogDataRequest(BaseModel):
    catalogData: RepositoryCatalogDataInput
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class PutRepositoryCatalogDataResponse(BaseModel):
    catalogData: Optional[RepositoryCatalogData] = None


class Registry(BaseModel):
    aliases: RegistryAliasList
    registryArn: Arn
    registryId: RegistryId
    registryUri: Url
    verified: RegistryVerified


class RegistryList(RootModel[List[Registry]]):
    root: List[Registry]


class BatchDeleteImageResponse(BaseModel):
    failures: Optional[ImageFailureList] = None
    imageIds: Optional[ImageIdentifierList] = None


class DescribeRegistriesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    registries: RegistryList
